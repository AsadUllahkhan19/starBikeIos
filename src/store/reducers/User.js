import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { fetchCount } from './counterAPI';
const initialState = {
  userRideCred: null,
  userAuthCredentials: null,
  checkRideStatus: 'start',
  timeElapsed: 0,
  timerRunning: false,
  ridePath: [],
  amount: 0,
  totalAmount: 0,
  chargedAmount:0
};

// asynchronous function with createAsyncThunk
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
    // const response = await fetchCount(amount);
    // return response.data;
  }
);

// Redux Toolkit slice
export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    userRideCredentials: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.userRideCred = action.payload;
    },
    userAuthCredentials: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.userAuthCredentials = action.payload;
    },
    userRideLocation: (state, action) => {
      state.ridePath.push(action.payload);
    },
    resetUserRideLocation: (state, _) => {
      state.ridePath = [];
    },
    handleTimerRunning: (state, action) => {
      state.timerRunning = action.payload;
    },
    timeElapsed: (state, action) => {
      state.timeElapsed += action.payload;
    },
    resetTimeElapsed: (state, _) => {
      state.timeElapsed = 0;
    },
    checkRideStatus: (state, action) => {
      state.checkRideStatus = action.payload;
    },
    setAmount: (state, action) => {
      const temp1 = Number(state.amount); 
      const temp2 = Number(action.payload);
      const result = temp1 + temp2; 
      state.amount = result;
    },
    putAmount: (state, action) => {
      state.amount = action.payload;
    },
    addTotalAmount: (state, action) => {
      state.totalAmount += action.payload;
    },
    putTotalAmount: (state, action) => {
      state.totalAmount = action.payload;
    },
    setTotalAmount: (state, action) => {
      state.chargedAmount += action.payload;
    },
    descAmount: (state, action) => {
      state.amount -= action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(incrementAsync.pending, (state) => {
      state.status = 'loading';
    })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  }
});

export const { userRideCredentials, userAuthCredentials, userRideLocation, resetUserRideLocation, checkRideStatus, timeElapsed, resetTimeElapsed, handleTimerRunning, setAmount, descAmount, putAmount, addTotalAmount, putTotalAmount, setTotalAmount } = userSlice.actions;
// more code...
export default userSlice.reducer;